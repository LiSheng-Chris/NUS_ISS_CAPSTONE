# -*- coding: utf-8 -*-
"""capstone_Preprocessing_Patch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HNT6gDiyKU-K0JAnsYr0xquaTvu4CYfw
"""

from skimage import data
from skimage.color import rgb2hed
from skimage.color import hed2rgb
from skimage.exposure import rescale_intensity
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import random
import cv2
import tensorflow as tf
from sklearn.datasets import load_sample_images
from sklearn.feature_extraction import image
import shutil 
from PIL import Image

np.random.seed(42)
tf.random.set_seed(42)


mask_dir= './data/masks/'
mask_patch_dir='./data/masks_patch/'

def create_patch(image_path):
  image_patch_folder        = "./data/images_patch/"
  plt.axis('off')

  image_name = os.path.splitext(os.path.basename(image_path))[0]
  print('image_name : ',image_name)
  image_patch_path  = image_patch_folder+image_name+'_patch_143.jpg'

  mask_name='mask_'+image_name+'.png'
  mask_patch_path=mask_patch_dir+'mask_'+image_name+'_patch_143.png'
  mask_path= os.path.join(mask_dir,mask_name)
  print('mask_path : ',mask_path)

  # generate mask patch
  if os.path.isfile(mask_patch_path):
    print (mask_patch_path, 'existed , skipping')
  else:
    ihc_mask= cv2.imread(mask_path,cv2.IMREAD_COLOR)
    ihc_mask = cv2.cvtColor(ihc_mask,cv2.COLOR_BGR2RGB)
    mask = tf.expand_dims(ihc_mask,0) # To create the batch information
    print('Image shape: {}'.format(mask.shape))
    mask_patches = tf.image.extract_patches(images=mask,
                                   sizes=[1, 250, 250, 1],
                                   strides=[1, 250, 250, 1],
                                   rates=[1, 1, 1, 1],
                                   padding='VALID')
    print('mask_patches shape:{}'.format(mask_patches.shape))
    for imgs in mask_patches:
        count = 0
        for r in range(12):
            for c in range(12):
                #plt.imshow(tf.reshape(imgs[r,c],shape=(250,250,3)).numpy().astype("uint8"))
                mask_patch_path=mask_patch_dir+'mask_'+image_name+'_patch_'+str(count)+'.png'
                print('mask_patch_path : ',mask_patch_path)
                out_mask=tf.reshape(imgs[r,c],shape=(250,250,3)).numpy().astype("uint8")               
                im = Image.fromarray(out_mask)
                im.save(mask_patch_path)
                #plt.savefig(mask_patch_path, transparent = True, bbox_inches = 'tight', pad_inches = 0)
                count += 1
    
  # generate image patch
  if os.path.isfile(image_patch_path):
    print (image_patch_path, 'existed , skipping')
  else:
    ihc= cv2.imread(image_path,cv2.IMREAD_COLOR)
    ihc = cv2.cvtColor(ihc,cv2.COLOR_BGR2RGB)
    image = tf.expand_dims(ihc,0) # To create the batch information
    print('Image shape: {}'.format(image.shape))
    patches = tf.image.extract_patches(images=image,
                                   sizes=[1, 250, 250, 1],
                                   strides=[1, 250, 250, 1],
                                   rates=[1, 1, 1, 1],
                                   padding='VALID')
    print('patches shape:{}'.format(patches.shape))
    for imgs in patches:
        count = 0
        for r in range(12):
            for c in range(12):
                #plt.imshow(tf.reshape(imgs[r,c],shape=(250,250,3)).numpy().astype("uint8"))
                image_patch_path=image_patch_folder+image_name+'_patch_'+str(count)+'.jpg'
                print('image_patch_path : ',image_patch_path)
                #plt.savefig(image_patch_path, transparent = True, bbox_inches = 'tight', pad_inches = 0)
                out_img=tf.reshape(imgs[r,c],shape=(250,250,3)).numpy().astype("uint8")
                im = Image.fromarray(out_img)
                im.save(image_patch_path)
                count += 1

import os
rootdir = './data/images/'

for subdir, dirs, files in os.walk(rootdir):
    for file in files:
        create_patch(os.path.join(subdir, file))

